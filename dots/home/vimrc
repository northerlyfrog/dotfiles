" Maintainer: Bram Moolenaar <Bram@vim.org>
" Last change: 2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"       for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"     for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
	finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'ajh17/Spacegray.vim'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-surround'
"Plugin 'Shougo/neocomplete.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-scripts/Conque-Shell'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'powerline/powerline-fonts'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

set background=dark " set the background to dark
"let g:neocomplete#enable_at_startup = 1


let g:airline_powerline_fonts = 1

" Open nerdtree automatically if no files are specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close vim if NERDTreee is the only thing left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Shortcut for opening NERDTree
let NERDTreeMirror = 1
let NERDTreeQuitOnOpen = 1
map <C-m> : NERDTreeToggle<CR>

" Set up syntastic Checkers

let g:syntastic_cpp_check_header = 1 " C++
let g:syntastic_cpp_auto_refresh_includes = 1
let g:syntastic_css_checkers = ["csslint","phpcs"] "CSS
let g:syntastic_go_checkers = ["go","golint"] " Go
let g:syntastic_html_checkers = ["jshint"] " Html
let g:syntastic_java_checkers = ["javac"] " Java
let g:syntastic_javascript_checkers = ["jshint"] " JavaScript
let g:syntastic_json_checkers = ["jsonval"] " JSON
let g:syntastic_markdown_checkers = ["mdl"] " Markdown
let g:syntastic_php_checkers = ["php","phplint"] " PHP
let g:syntastic_xHTML_checkers = ["jshint"] " xHTML
let g:syntastic_xml_checkers = ["xmllint"] " XML

" Set color scheme!
colorscheme spacegray

" Use the OS clipboard by default (when available)
set clipboard=unnamed

" Set syntax on
syntax enable 

" Turn on the manual pages
runtime ftplugin/man.vim

set autoindent " Turn autoindent on

set wrap
set linebreak
set nolist "list disables linebreak
set textwidth=0
set wrapmargin=0
set formatoptions+=1

set showmatch " Show matches for braces, parens, etc.

set sessionoptions-=options " Turn default capturing global options off

" Enable syntax highlighting with unknown extensions
au BufNewFile,BufRead *.xyz setf c

" Enhance command-line completion
set wildmenu


set spelllang=en_us " English spellchecking

" Allow cursor keys in insert mode
set esckeys

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Optimize for fast terminal connections
set ttyfast

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps

if exists("&undodir")
	set undodir=~/.vim/undo
endif

set viminfo+=! " make sure vim history works

set secure " disable unsafe commands

" Highlight current line
set cursorline

" Make tabs 4 spaces
set tabstop=2

set shiftwidth=2 " 2 char indention

set shiftround " Indent/Dedent to nearest 4-char boundary

set autoindent " Automatically indent when adding a new line.

" Enable line numbers
set number

" Show invisible characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_,precedes:«,extends:»
set list

" Highlight searches
set hlsearch

" Highlight dynamically as pattern is typed
set incsearch

" Always show status line
set laststatus=2

" Don't reset cursor to start of line when moving around
set nostartofline

" Show cursor position
set ruler

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it's being typed
set showcmd

" Set ignorecase and smartcase for smart searching
" all lower case ignores cases, Any Caps uses smart searching
set ignorecase
set smartcase

" Set scrolloff options
set scrolloff=30

" Set wildmode up
set wildmode=longest,list

" Don’t show the intro message when starting Vim
set shortmess=atI

if has("vms")
	set nobackup  " do not keep a backup file, use versions instead
else
	set backup  " keep a backup file
endif
set history=500  " keep 500 lines of command line history
set ruler  " show the cursor position all the time
set showcmd  " display incomplete commands
set incsearch  " do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
endif

" Set up proper crontab management
autocmd filetype crontab setlocal nobackup nowritebackup

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	syntax on
	set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

	" Enable file type detection.
	" Use the default filetype settings, so that mail gets 'tw' set to 72,
	" 'cindent' is on in C files, etc.
	" Also load indent files, to automatically do language-dependent indenting.
	filetype plugin indent on

	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
	autocmd BufNewFile,BufRead *.json set ft=javascript
	autocmd FileType yaml execute  ':silent! %s#^\t\+#\=repeat(" ", len(submatch(0))*' . &ts . ')'

	" Put these in an autocmd group, so that we can delete them easily.
	augroup vimrcEx
		au!

		" For all text files set 'textwidth' to 78 characters.
		autocmd FileType text setlocal textwidth=100

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid or when inside an event handler
		" (happens when dropping a file on gvim).
		" Also don't do it when the mark is in the first line, that is the default
		" position when opening a file.
		autocmd BufReadPost *
					\ if line("'\"") > 1 && line("'\"") <= line("$") |
					\   exe "normal! g`\"" |
					\ endif

	augroup END

	augroup vimrc     " Source vim configuration upon save
		autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
		autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
	augroup END
else

	set autoindent " always set autoindenting on

endif " has("autocmd")

if bufwinnr(1)
	map <kPlus> <C-W>+
	map <kMinus> <C-W>-
	map <kDivide> <c-w><
	map <kMultiply> <c-w>>
endif

" Stop my bad arrow key habit
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Remap navigation between splits keystrokes
" Instead of ctrl-w then j, it's just ctrl-j
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-T> <C-W><C-T>
nnoremap <C-B> <C-W><C-B>

" Change how vim opens new splits
set splitbelow
set splitright

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
				\ | wincmd p | diffthis
endif

" Set up vimdiff settings
if &diff
	" set no read only
	set noro

	" disable cursorline
	set nocursorline

	" inserts empty lines for sync so nothing is hidden
	set diffopt=filler,context:1000000

endif

set showtabline=2  " 0, 1 or 2; when to use a tab pages line
set tabline=%!MyTabLine()  " custom tab pages line
function MyTabLine()
	let s = '' " complete tabline goes here
	" loop through each tab page
	for t in range(tabpagenr('$'))
		" set highlight for tab number and &modified
		let s .= '%#TabLineSel#'
		" set the tab page number (for mouse clicks)
		let s .= '%' . (t + 1) . 'T'
		" set page number string
		let s .= t + 1 . ':'
		" get buffer names and statuses
		let n = ''  "temp string for buffer names while we loop and check buftype
		let m = 0  " &modified counter
		let bc = len(tabpagebuflist(t + 1))  "counter to avoid last ' '
		" loop through each buffer in a tab
		for b in tabpagebuflist(t + 1)
			" buffer types: quickfix gets a [Q], help gets [H]{base fname}
			" others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
			if getbufvar( b, "&buftype" ) == 'help'
				let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
			elseif getbufvar( b, "&buftype" ) == 'quickfix'
				let n .= '[Q]'
			else
				let n .= pathshorten(bufname(b))
			endif
			" check and ++ tab's &modified count
			if getbufvar( b, "&modified" )
				let m += 1
			endif
			" no final ' ' added...formatting looks better done later
			if bc > 1
				let n .= ' '
			endif
			let bc -= 1
		endfor
		" add modified label [n+] where n pages in tab are modified
		if m > 0
			let s .= '[' . m . '+]'
		endif
		" select the highlighting for the buffer names
		" my default highlighting only underlines the active tab
		" buffer names.
		if t + 1 == tabpagenr()
			let s .= '%#TabLine#'
		else
			let s .= '%#TabLineSel#'
		endif
		" add buffer names
		let s .= n
		" switch to no underlining and add final space to buffer list
		let s .= '%#TabLineSel#' . ' '
	endfor
	" after the last tab fill with TabLineFill and reset tab page nr
	let s .= '%#TabLineFill#%T'
	" right-align the label to close the current tab page
	if tabpagenr('$') > 1
		let s .= '%=%#TabLineFill#%999Xclose'
	endif
	return s
endfunction


